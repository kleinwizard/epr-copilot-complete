name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: epr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd backend
        poetry install --no-interaction --no-root
    
    - name: Install project
      run: |
        cd backend
        poetry install --no-interaction
    
    - name: Run linting
      run: |
        cd backend
        poetry run ruff check epr_backend/
        poetry run mypy epr_backend/
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epr_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        cd backend
        poetry run pytest -v --cov=epr_backend --cov-report=term-missing --cov-report=xml --cov-fail-under=95
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
        npm run type-check
    
    - name: Run tests with coverage
      run: |
        cd frontend
        npm run test:coverage
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: epr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install poetry
        poetry install
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps
    
    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epr_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        cd backend
        poetry run alembic upgrade head
        poetry run uvicorn epr_backend.main:app --host 0.0.0.0 --port 8001 &
        sleep 10
    
    - name: Start frontend server
      run: |
        cd frontend
        npm run build
        npm run preview -- --port 8080 --host 0.0.0.0 &
        sleep 5
    
    - name: Run Playwright tests
      run: |
        cd frontend
        npx playwright test
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t epr-backend:test .
    
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t epr-frontend:test .
    
    - name: Test Docker images
      run: |
        docker run --rm epr-backend:test python -c "import epr_backend; print('Backend image OK')"
        docker run --rm epr-frontend:test ls /usr/share/nginx/html/index.html

  performance-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: epr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install poetry
        poetry install
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epr_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        cd backend
        poetry run alembic upgrade head
        poetry run uvicorn epr_backend.main:app --host 0.0.0.0 --port 8001 &
        sleep 10
    
    - name: Build and start frontend
      run: |
        cd frontend
        npm run build
        npm run preview -- --port 8080 --host 0.0.0.0 &
        sleep 5
    
    - name: Run k6 performance tests
      run: |
        k6 run performance/k6-load-test.js
    
    - name: Run Lighthouse CI
      run: |
        cd frontend
        npm install -g @lhci/cli
        lhci autorun --upload.target=temporary-public-storage
